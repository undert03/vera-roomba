<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<implementation>
  <specVersion>
    <major>0</major>
    <minor>1</minor>
  </specVersion>
  <settings>
    <protocol>cr</protocol>
  </settings>
  <startup>main</startup>
  <functions>
  
  local ROOMBA_SID = "urn:nitehawk-nl:serviceId:Roomba1"
  local HAD_SID = "urn:micasaverde-com:serviceId:HaDevice1"	
	local DEFAULT_ADDRESS = "Enter IP of Roowifi"
	json = require("json-rw")
	local BatteryStatus = 0
	local OriginalPoll = 0
	local PendingCMDaction = "Nothing"
	local function log(text)
      local id = PARENT_DEVICE or "unknown"
      luup.log("Roomba Plugin #" .. id .. " " .. text)
    end
	
	local function InitRoombaSettings(address)
	
		-- Defaults
      address = address or DEFAULT_ADDRESS
	  
	  luup.variable_set(ROOMBA_SID, "Address", address, parentDevice)
	  luup.variable_set(ROOMBA_SID, "Target", "0", parentDevice)
    luup.variable_set(ROOMBA_SID, "Status", "0", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Poll", "120", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Username", "admin", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Password", "roombawifi", parentDevice)
	  
	  log("InitRoombaSettings")
	  
	  log("Initialized variable: 'Address' = " .. address)
	  log("Initialized variable: 'Target' = " .. Target)
	  log("Initialized variable: 'Status' = " .. Status)
	  log("Initialized variable: 'Poll' = " .. Poll)
	  log("Initialized variable: 'Username and Password' = " .. Username)
	  
	  luup.task("Please restart Luup to initialize the plugin.", 1, "Roomba Plugin", -1)
	  
	  return address
	  
	end
	
	local function readRoombaSettings(parentDevice)
		log("readRoombaSettings")
		
		local address = luup.variable_get(ROOMBA_SID, "Address", parentDevice)
		local Poll = luup.variable_get(ROOMBA_SID, "Poll", parentDevice)
		local addresspre = ""
		local RUsername = luup.variable_get(ROOMBA_SID, "Username", parentDevice)
		local RPassword = luup.variable_get(ROOMBA_SID, "Password", parentDevice)
		
		if (address == nil) then
			-- log("InitRoombaSettings called - Address")
			address = InitRoombaSettings(address)
		end

		if (RUsername == nil) then
			log("null USERNAME")
			addresspre = ""
		else
			addresspre = RUsername .. ":" .. RPassword .. "@"
			-- log("Username Password Prefix set: " .. addresspre)
		end
		
		if (Poll == nil) then
			-- log("InitRoombaSettings called - Poll")
			Poll = InitRoombaSettings(address)
		end
		
		return address, Poll, addresspre
		
	end
	
	function GetRoombaData()
	
		log("GetRoombaData")
		
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		local url = "http://".. addresspre .. address .."/roomba.json"
		-- log("Fetch url: " .. "http://".. addresspre .. address .."/roomba.json" )

		local status, result = luup.inet.wget(url, 10)
		if status == 0 then
		 	local data = json.decode(result)
		 	local Capacity = data.response.r19.value
		 	local Charge = data.response.r18.value
		 	local CleaningStatus = data.response.r14.value
		 	
		 	local CurrentValue = data.response.r16.value
		 	CurrentValue = CurrentValue * -1
		 	
		 	BatteryStatus = (Charge / Capacity) * 100
	 	  luup.variable_set(HAD_SID, "BatteryLevel", BatteryStatus, parentDevice)
		 	
		 	log("Pending Action [" .. PendingCMDaction .. "] Org Poll: " .. OriginalPoll)
		 	
		 	-- Get Current Status
		 	if (CleaningStatus == "4" and CurrentValue > 200) then
		 		log("Currently Cleaning : " .. CleaningStatus )
		 						
				luup.variable_set(ROOMBA_SID, "Target", "1", parentDevice)
    		luup.variable_set(ROOMBA_SID, "Status", "1", parentDevice)
    	else
		 		if ( PendingCMDaction == "Dock") then
		 			PendingCMDaction = "Nothing"
		 			Poll = OriginalPoll
		 			luup.variable_set(ROOMBA_SID, "Poll", OriginalPoll, parentDevice)
		 		end
		 		
		 		log("Currently Docked : [" .. CleaningStatus .."]" )
				luup.variable_set(ROOMBA_SID, "Target", "0", parentDevice)
    		luup.variable_set(ROOMBA_SID, "Status", "0", parentDevice)    	
		 	end
		 	
		 	
	  end
		log("GetRoombaData Delay Call " .. Poll)
		luup.call_delay ("GetRoombaData", Poll, "")
	end
	
	function RoombaUp()
		log("RoombaUp")
	
		local address, Poll = readRoombaSettings(parentDevice)
		pingcommand = "ping -c 1 " ..address
		pingresponse = os.execute(pingcommand)
		if (pingresponse == 0) then
			luup.variable_set(ROOMBA_SID,"PingStatus","up",parentDevice)
			log("Ping reply ")
		else
			luup.variable_set(ROOMBA_SID,"PingStatus","down",parentDevice)
			log("No ping reply ")
		end
		PingInterval = luup.variable_get(ROOMBA_SID,"Poll", parentDevice)
		luup.call_delay("RoombaUp", Poll, "")
	end
	
	function main(parentDevice)
      --
      -- Note these are "pass-by-Global" values that refreshCache will later use.
      --
      PARENT_DEVICE = parentDevice

      log("VERSION 1.4 starting up..")
		
	  luup.variable_set(HAD_SID, "LastUpdate", os.time(os.date('*t')), parentDevice)
      luup.variable_set(HAD_SID, "Configured", "1", parentDevice)
	  
      --
      -- Validate that the Address/Delay are configured in Vera, otherwise this
      -- code wont work.
      --
    local address = readRoombaSettings(parentDevice)
	  local Poll = readRoombaSettings(parentDevice)
      if (address == nil) then
        log("could not be started.")
				log("adress value " .. address)
        luup.set_failure(true, parentDevice)
        return false
      end
      
	  	luup.call_delay ("GetRoombaData", 1, "")
	  	luup.call_delay("RoombaUp", 1, "")
	  	-- log("Main End Reached")
      return true
    end
	
	local function RoombaClean()
		log("RoombaClean")
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		log("http://" .. addresspre .. address .. "/roomba.cgi?button=C" )
    luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=CLEAN")
		luup.variable_set(ROOMBA_SID, "Target", "1", parentDevice)
    luup.variable_set(ROOMBA_SID, "Status", "1", parentDevice)
	end	
	
	local function RoombaDock()
		log("RoombaDock")

		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		local settingsurl = "http://".. addresspre .. address .."/roomba.json"
		local status, result = luup.inet.wget(settingsurl, 10)

		if status == 0 then
		 	local data = json.decode(result)
		 	local CleaningStatus = data.response.r14.value
		 	local CurrentValue = data.response.r16.value
		 	CurrentValue = CurrentValue * -1
		 	if (CleaningStatus == "4") then
		 		log("Currently Cleaning : [" .. CleaningStatus .."] Current[".. CurrentValue .."]" )
		 		if (CurrentValue > 200) then
		 			log("Pausing cleaning")
			 		-- Cleaning and moving so pause cleaning before sending the dock command for a quicker dock
			 		luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=CLEAN" )
			 		luup.sleep(5000)
		 		end
		 		log("Issuing Dock command")
		 		luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=DOCK" )
		 	else
		 		log("Not Cleaning : [" .. CleaningStatus .."] So i will just issue dock command" )
		 		luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=DOCK" )
		 	end
		 	
		 	-- Make Poll Quicker for real time status
		 	OriginalPoll = Poll
		 	luup.variable_set(ROOMBA_SID, "Poll", "120", parentDevice)
		 	PendingCMDaction = "Dock"
		 	
			luup.variable_set(ROOMBA_SID, "Target", "0", parentDevice)
      luup.variable_set(ROOMBA_SID, "Status", "0", parentDevice)
      
      luup.call_delay ("GetRoombaData", "120", "")
		else
			log("RoombaDock ERROR can not get Status will try to just issue dock command")
			luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=DOCK" )
		end

	end
		
  </functions>
  <actionList>
    <action>
		<serviceId>urn:nitehawk-nl:serviceId:Roomba1</serviceId>
		<name>Clean</name>
		<job>
			RoombaClean()
		</job>
	</action>
	
	<action>
		<serviceId>urn:nitehawk-nl:serviceId:Roomba1</serviceId>
		<name>Dock</name>
		<job>
			RoombaDock()
		</job>
	</action>

    <action>
      <serviceId>urn:nitehawk-nl:serviceId:Roomba1</serviceId>
      <name>GetAddress</name>
      <run>
        luup.variable_get(ROOMBA_SID, "Address", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:nitehawk-nl:serviceId:Roomba1</serviceId>
      <name>SetAddress</name>
      <run>
        luup.variable_set(ROOMBA_SID, "Address", lul_settings.newAddressValue, parentDevice)
      </run>
    </action>
  </actionList>
</implementation>
