<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<implementation>
  <specVersion>
    <major>0</major>
    <minor>1</minor>
  </specVersion>
  <settings>
    <protocol>cr</protocol>
  </settings>
  <startup>main</startup>
  <functions>
  
  local ROOMBA_SID = "urn:undertoe-us:serviceId:Roomba1"
  local HAD_SID = "urn:micasaverde-com:serviceId:HaDevice1"	
	local DEFAULT_ADDRESS = "Enter IP of Roowifi"
	local json = require("json-rw")
	local BatteryStatus = 0
	local OriginalPoll = 0
	local QuickPoll = 10
	local PendingCMDaction = "Nothing"
	local HTTPtimeout = 5
	local PollLongRunning = false
	local PollShortRunning = false
	local Task_Handle = -1
	local DEBUG = false
	
	local function log(text)
		local id = PARENT_DEVICE or "unknown"
		luup.log("Roomba Plugin #" .. id .. " " .. text)
  end
		
	local function InitRoombaSettings(address)
		if(DEBUG) then log("========= InitRoombaSettings ===========") end
		-- Defaults
    address = address or DEFAULT_ADDRESS
	  
	  luup.variable_set(ROOMBA_SID, "Address", address, parentDevice)
	  luup.variable_set(ROOMBA_SID, "Target", "0", parentDevice)
    luup.variable_set(ROOMBA_SID, "Status", "0", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Poll", "120", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Username", "admin", parentDevice)
	  luup.variable_set(ROOMBA_SID, "Password", "roombawifi", parentDevice)
	  luup.variable_set(ROOMBA_SID, "CmdStatus", "Device Setup", parentDevice)
	  	  
	  log("Initialized variable: 'Address' = " .. address)
	  log("Initialized variable: 'Target' = " .. Target)
	  log("Initialized variable: 'Status' = " .. Status)
	  log("Initialized variable: 'Poll' = " .. Poll)
	  log("Initialized variable: 'Username and Password' = " .. Username)
	  
	  luup.task("Please restart Luup to initialize the plugin.", 1, "Roomba Plugin", -1)
	  
	  return address
	  
	end
	
	local function RoombaPingStatus()
		if(DEBUG) then log("========= RoombaPingStatus ===========") end
		local PingStatus = luup.variable_get(ROOMBA_SID, "PingStatus", parentDevice)
		if ( PingStatus == "down" ) then
			return true
		else
			return false
		end	
	end
	
	local function RoombaShortPoll()
		if(DEBUG) then log("========= RoombaShortPoll ===========") end
		
		OriginalPoll = luup.variable_get(ROOMBA_SID, "Poll", parentDevice)
		luup.variable_set(ROOMBA_SID, "Poll", QuickPoll, parentDevice)
		if( not PollShortRunning ) then
			luup.call_delay ("GetRoombaDataShort", 1, "")
		end
	end

	local function RoombaShortPollReset()
		if(DEBUG) then log("========= RoombaShortPollReset ===========") end
		
		PendingCMDaction = "Nothing"
		local Poll = OriginalPoll
		OriginalPoll = 0
		luup.variable_set(ROOMBA_SID, "Poll", Poll, parentDevice)
		return Poll
	end

	local function readRoombaSettings(parentDevice)
		if(DEBUG) then log("========= readRoombaSettings ===========") end
		
		local address = luup.variable_get(ROOMBA_SID, "Address", parentDevice)
		local Poll = luup.variable_get(ROOMBA_SID, "Poll", parentDevice)
		local addresspre = ""
		local RUsername = luup.variable_get(ROOMBA_SID, "Username", parentDevice)
		local RPassword = luup.variable_get(ROOMBA_SID, "Password", parentDevice)
		local CmdStatus = luup.variable_get(ROOMBA_SID, "CmdStatus", parentDevice)
		
		if (address == nil) then
			address = InitRoombaSettings(address)
		end

		if (RUsername == nil) then
			addresspre = ""
		else
			addresspre = RUsername .. ":" .. RPassword .. "@"
		end
		
		if (Poll == nil) then
			InitRoombaSettings(address)
			Poll = "120"
		end

		if (CmdStatus == nil) then
			InitRoombaSettings(address)
		end
		
		return address, Poll, addresspre	
	end

	local function RoombaUpdateBatteryLevel()
		if(DEBUG) then log("========= RoombaUpdateBatteryLevel ===========") end
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		local PingStatus = luup.variable_get(ROOMBA_SID, "PingStatus", parentDevice)
		if ( RoombaPingStatus() ) then
			log("Can not connect: " .. address .. " Will try again in " .. Poll .. " seconds")
			return true
		end

		local JSONurl = "http://".. addresspre .. address .."/roomba.json"
		local status, result = luup.inet.wget(JSONurl, HTTPtimeout)
		if status == 0 then
			local data = json.decode(result)
			local Charge = data.response.r18.value
		 	local Capacity = data.response.r19.value
		 	BatteryStatus = (Charge / Capacity) * 100
		 	if(DEBUG) then log("Battery Level Updated | Real:" .. BatteryStatus .. " > Rounded:" .. math.floor(BatteryStatus) ) end
		 	luup.variable_set(HAD_SID, "BatteryLevel", math.floor(BatteryStatus), parentDevice)
		end
	end
	
	local function RoombaRobotStatus()
		Task_Handle = luup.task("Roomba1", 4, "Roomba", Task_Handle)
		if(DEBUG) then log("========= RoombaRobotStatus ===========") end
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		
		local MotionStatus = ""
		local StatusBox = ""
		local Docked = false
		local StatusLevel = 0
		local TargetLevel = 0

		local PingStatus = luup.variable_get(ROOMBA_SID, "PingStatus", parentDevice)
		if ( RoombaPingStatus() ) then
			log("Can not connect: " .. address .. " Will try again in " .. Poll .. " seconds")
			return true
		end
		-- Connect to Robot and read JSON
		
		local JSONurl = "http://".. addresspre .. address .."/roomba.json"
		local status, result = luup.inet.wget(JSONurl, HTTPtimeout)
		if status == 0 then
		
			local data = json.decode(result)
		 	local ChargeStatus = data.response.r14.value
		 	local CurrentValue = (data.response.r16.value * -1)
		 	local CliffSensor = (data.response.r4.value + data.response.r5.value)
		 	
		 	if(DEBUG) then log(" == Current: " .. CurrentValue .. " | Charge Status: " .. ChargeStatus .. " | Cliff : " .. CliffSensor) end
		 	
		 	if ( CliffSensor >= 2) then
		 		-- Robot is docked
		 		MotionStatus = "Dock"
		 		Docked = true
				StatusLevel = 0
				TargetLevel = 0
		 		if ( ChargeStatus == "1" ) then 
		 			StatusBox = "Charging??"
		 			TargetLevel = -75
		 			StatusLevel = -75
		 		elseif ( ChargeStatus == "2" ) then
		 			StatusBox = "Charging"
		 			TargetLevel = 0
		 			StatusLevel = 0
		 		elseif ( ChargeStatus == "3" ) then
		 			StatusBox = "Trickle Charge"
		 			TargetLevel = -50
		 			StatusLevel = -50
		 		elseif ( ChargeStatus == "4" ) then
		 			TargetLevel = 0
		 			StatusLevel = -25
		 			StatusBox = "Docked"
		 		else
		 			StatusBox = "NA [" .. ChargeStatus .."]"
		 		end
		 	elseif ( CurrentValue > 200 ) then
		 		Docked = false
		 		MotionStatus = "Clean"
				StatusLevel = 100
				TargetLevel = 100
		 		StatusBox = "Cleaning"
		 		if ( PendingCMDaction == "Dock") then
		 			StatusBox = "Docking.."
					StatusLevel = 50
					TargetLevel = 100
		 		end
		 	else
		 		Docked = false
		 		MotionStatus = "Pause"
		 		StatusBox = "Paused"
				StatusLevel = 125
				TargetLevel = 100
		 		if ( PendingCMDaction == "Dock") then
		 			StatusBox = "Docking.."
					StatusLevel = 50
					TargetLevel = 100
		 		elseif ( PendingCMDaction == "Clean") then
		 			StatusBox = "Undocking"
					StatusLevel = 25
					TargetLevel = 100
		 		end
		 	end

			-- Handle Pending Commands
		 	if ( PendingCMDaction == MotionStatus) then
		 		if( DEBUG) then log("=== > PENDING CMD ACHIVED! ".. PendingCMDaction .. " Back to Normal Poll: " .. OriginalPoll ) end
		 		RoombaShortPollReset()
		  else
		 		if( DEBUG) then log(" === > PENDING CMD NO GOOD [".. MotionStatus .." != ".. PendingCMDaction .."]") end
		 	end		 	
		 	
		 	return Docked, MotionStatus, StatusBox, TargetLevel, StatusLevel
		else
			log("JSON URL fetch error: " .. JSONurl)
			return false
		end		

	end

	
	function GetRoombaData()
		if( DEBUG) then log("========= GetRoombaData ===========") end
		local address, Poll, addresspre = readRoombaSettings(parentDevice)

		if( tostring(Poll) == tostring(QuickPoll) ) then
			luup.call_delay ("GetRoombaData", 120, "")
			return true
		end

		local Docked, MotionStatus, StatusTxt, TargetLevel, StatusLevel = RoombaRobotStatus()
		luup.variable_set(ROOMBA_SID, "CmdStatus", StatusTxt, parentDevice)
		
		luup.variable_set(ROOMBA_SID, "LoadlevelTarget", TargetLevel, parentDevice)
    luup.variable_set(ROOMBA_SID, "LoadLevelStatus", StatusLevel, parentDevice)
    
		RoombaUpdateBatteryLevel()
		luup.call_delay ("GetRoombaData", tonumber(Poll), "")
	end

	function GetRoombaDataShort()
		if( DEBUG) then log("========= GetRoombaDataShort ===========") end
			
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		if( tostring(Poll) ~= tostring(QuickPoll) ) then
			return true
		end
		
		PollLongRunning = true
		local Docked, MotionStatus, StatusTxt, TargetLevel, StatusLevel = RoombaRobotStatus()
		luup.variable_set(ROOMBA_SID, "CmdStatus", StatusTxt, parentDevice)
		
		luup.variable_set(ROOMBA_SID, "LoadlevelTarget", TargetLevel, parentDevice)
    luup.variable_set(ROOMBA_SID, "LoadLevelStatus", StatusLevel, parentDevice)
    
		RoombaUpdateBatteryLevel()
		luup.call_delay ("GetRoombaDataShort", tonumber(Poll), "")
	end
			
	function RoombaUp()
		if(DEBUG) then log("========= RoombaUp ===========") end	
		
		local RtnStatus = false
		local address, Poll = readRoombaSettings(parentDevice)
		pingcommand = "ping -c 1 " .. address
		pingresponse = os.execute(pingcommand)
		if (pingresponse == 0) then
			
			if (PingStatus == "down") then
					luup.variable_set(ROOMBA_SID, "CmdStatus", "Connected", parentDevice)
			end
		
			luup.variable_set(ROOMBA_SID,"PingStatus","up",parentDevice)
			if( DEBUG) then log("Ping reply ") end
			RtnStatus = true
		else
			luup.variable_set(ROOMBA_SID,"PingStatus","down",parentDevice)
			luup.variable_set(ROOMBA_SID, "CmdStatus", "Check IP", parentDevice)
			log("No ping reply : " .. address )
			RtnStatus = false
		end
		
		PingInterval = luup.variable_get(ROOMBA_SID, "Poll", parentDevice)
		luup.call_delay("RoombaUp", 120, "")
		return RtnStatus
	end
		
	local function RoombaClean()
		if( DEBUG) then log(" ====== RoombaClean ===========") end
		
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		local Docked, MotionStatus, StatusTxt = RoombaRobotStatus()
		
		if( MotionStatus == "Clean") then
			PendingCMDaction = "Pause"
		else
			PendingCMDaction = "Clean"
		end
		
		luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=CLEAN", HTTPtimeout)
		RoombaShortPoll()
	end	
	
	local function RoombaDock()
		if( DEBUG) then log(" ====== RoombaDock ===========") end
		local address, Poll, addresspre = readRoombaSettings(parentDevice)
		local Docked, MotionStatus, StatusTxt = RoombaRobotStatus()
		
		if (Docked) then
			-- Just for shits and giggles
			PendingCMDaction = "Dock"
			RoombaShortPoll()
			return true
		end
		
		if ( MotionStatus ~= "Pause") then
			luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=CLEAN", HTTPtimeout )
			luup.sleep(2500)
		end
		luup.inet.wget("http://" .. addresspre .. address .. "/roomba.cgi?button=DOCK", HTTPtimeout )

		PendingCMDaction = "Dock"
		luup.variable_set(ROOMBA_SID, "CmdStatus", "Docking", parentDevice)
		RoombaShortPoll()
	end

	function main(parentDevice)
    PARENT_DEVICE = parentDevice

    log("VERSION 1.4.2 starting up..")
		if( DEBUG) then log("DEBUG : ENABLED!") end
			
	  luup.variable_set(HAD_SID, "LastUpdate", os.time(os.date('*t')), parentDevice)
    luup.variable_set(HAD_SID, "Configured", "1", parentDevice)
	  
    local address = readRoombaSettings(parentDevice)
	  local Poll = readRoombaSettings(parentDevice)
    if ( (address == nil) or (address == DEFAULT_ADDRESS) ) then
      if( DEBUG) then log("could not be started.") end
      luup.set_failure(true, parentDevice)
      luup.variable_set(ROOMBA_SID, "CmdStatus", "Set your IP", parentDevice)
      return false
    end
      
    luup.variable_set(ROOMBA_SID, "Poll", "120", parentDevice)
      
	 	luup.call_delay ("GetRoombaData", 1, "")
	  luup.call_delay("RoombaUp", 1, "")
		
		-- taskHandle = luup.task(text, (mode == TASK_ERROR_PERM) and TASK_ERROR or mode, MSG_CLASS, taskHandle)		
    return true
  end

  </functions>

  <actionList>
    <action>
		<serviceId>urn:undertoe-us:serviceId:Roomba1</serviceId>
		<name>Clean</name>
		<job>
			RoombaClean()
		</job>
	</action>
	
	<action>
		<serviceId>urn:undertoe-us:serviceId:Roomba1</serviceId>
		<name>Dock</name>
		<job>
			RoombaDock()
		</job>
	</action>

    <action>
      <serviceId>urn:undertoe-us:serviceId:Roomba1</serviceId>
      <name>GetAddress</name>
      <run>
        luup.variable_get(ROOMBA_SID, "Address", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:undertoe-us:serviceId:Roomba1</serviceId>
      <name>SetAddress</name>
      <run>
        luup.variable_set(ROOMBA_SID, "Address", lul_settings.newAddressValue, parentDevice)
      </run>
    </action>
  </actionList>
</implementation>
